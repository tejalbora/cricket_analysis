{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tejalbora/cricket_analysis/blob/main/Live%20Win%20Prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "doIoejoKH-1_"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "deliveries = pd.read_csv('/content/deliveries.csv')\n",
        "deliveries.head()\n",
        "matches = pd.read_csv('/content/matches.csv')"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Jmm8FsvdAYPu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total_df=deliveries.groupby(['match_id', 'inning']).sum()['total_runs'].reset_index()\n",
        "total_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "_3nSFMLQLpMY",
        "outputId": "f654c17e-2145-4c98-a3a1-788dbdd91a19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-e54554dd481d>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
            "  total_df=deliveries.groupby(['match_id', 'inning']).sum()['total_runs'].reset_index()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     match_id  inning  total_runs\n",
              "0           1       1       207.0\n",
              "1           1       2       172.0\n",
              "2           2       1       184.0\n",
              "3           2       2       187.0\n",
              "4           3       1       183.0\n",
              "..        ...     ...         ...\n",
              "788       391       2       139.0\n",
              "789       392       1       154.0\n",
              "790       392       2       158.0\n",
              "791       393       1       145.0\n",
              "792       393       2        85.0\n",
              "\n",
              "[793 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f7eb078-7f40-4c4d-afad-54b039f4bdd2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_id</th>\n",
              "      <th>inning</th>\n",
              "      <th>total_runs</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>207.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>172.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>184.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>187.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>183.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>788</th>\n",
              "      <td>391</td>\n",
              "      <td>2</td>\n",
              "      <td>139.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>789</th>\n",
              "      <td>392</td>\n",
              "      <td>1</td>\n",
              "      <td>154.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>790</th>\n",
              "      <td>392</td>\n",
              "      <td>2</td>\n",
              "      <td>158.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>791</th>\n",
              "      <td>393</td>\n",
              "      <td>1</td>\n",
              "      <td>145.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>792</th>\n",
              "      <td>393</td>\n",
              "      <td>2</td>\n",
              "      <td>85.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>793 rows Ã— 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f7eb078-7f40-4c4d-afad-54b039f4bdd2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3f7eb078-7f40-4c4d-afad-54b039f4bdd2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3f7eb078-7f40-4c4d-afad-54b039f4bdd2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total_df[total_df['inning']==2]\n",
        "#remiving 2nd innings total"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "-IwgxuY9MQlM",
        "outputId": "8bcaac01-25a0-40ce-af8f-7dfa9199aecd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     match_id  inning  total_runs\n",
              "1           1       2       172.0\n",
              "3           2       2       187.0\n",
              "5           3       2       184.0\n",
              "7           4       2       164.0\n",
              "9           5       2       142.0\n",
              "..        ...     ...         ...\n",
              "784       389       2       125.0\n",
              "786       390       2       165.0\n",
              "788       391       2       139.0\n",
              "790       392       2       158.0\n",
              "792       393       2        85.0\n",
              "\n",
              "[392 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4aaabd11-f3e9-488e-9e97-3fa18c09c8a9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_id</th>\n",
              "      <th>inning</th>\n",
              "      <th>total_runs</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>172.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>187.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>184.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>164.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>142.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>784</th>\n",
              "      <td>389</td>\n",
              "      <td>2</td>\n",
              "      <td>125.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>786</th>\n",
              "      <td>390</td>\n",
              "      <td>2</td>\n",
              "      <td>165.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>788</th>\n",
              "      <td>391</td>\n",
              "      <td>2</td>\n",
              "      <td>139.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>790</th>\n",
              "      <td>392</td>\n",
              "      <td>2</td>\n",
              "      <td>158.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>792</th>\n",
              "      <td>393</td>\n",
              "      <td>2</td>\n",
              "      <td>85.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>392 rows Ã— 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4aaabd11-f3e9-488e-9e97-3fa18c09c8a9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4aaabd11-f3e9-488e-9e97-3fa18c09c8a9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4aaabd11-f3e9-488e-9e97-3fa18c09c8a9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "match_df=matches.merge(total_df[['match_id', 'total_runs']], left_on='id' , right_on='match_id')\n",
        "match_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 956
        },
        "id": "ED_fCASvYI1E",
        "outputId": "5fd68f96-9ea0-4b1d-a943-bba5f3e7ef5c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id    Season        city        date                  team1  \\\n",
              "0      1  IPL-2017   Hyderabad  05-04-2017    Sunrisers Hyderabad   \n",
              "1      1  IPL-2017   Hyderabad  05-04-2017    Sunrisers Hyderabad   \n",
              "2      2  IPL-2017        Pune  06-04-2017         Mumbai Indians   \n",
              "3      2  IPL-2017        Pune  06-04-2017         Mumbai Indians   \n",
              "4      3  IPL-2017      Rajkot  07-04-2017          Gujarat Lions   \n",
              "..   ...       ...         ...         ...                    ...   \n",
              "788  391  IPL-2013  Chandigarh  10-04-2013        Kings XI Punjab   \n",
              "789  392  IPL-2013   Bangalore  11-04-2013  Kolkata Knight Riders   \n",
              "790  392  IPL-2013   Bangalore  11-04-2013  Kolkata Knight Riders   \n",
              "791  393  IPL-2013        Pune  11-04-2013       Rajasthan Royals   \n",
              "792  393  IPL-2013        Pune  11-04-2013       Rajasthan Royals   \n",
              "\n",
              "                           team2                  toss_winner toss_decision  \\\n",
              "0    Royal Challengers Bangalore  Royal Challengers Bangalore         field   \n",
              "1    Royal Challengers Bangalore  Royal Challengers Bangalore         field   \n",
              "2         Rising Pune Supergiant       Rising Pune Supergiant         field   \n",
              "3         Rising Pune Supergiant       Rising Pune Supergiant         field   \n",
              "4          Kolkata Knight Riders        Kolkata Knight Riders         field   \n",
              "..                           ...                          ...           ...   \n",
              "788          Chennai Super Kings          Chennai Super Kings         field   \n",
              "789  Royal Challengers Bangalore  Royal Challengers Bangalore         field   \n",
              "790  Royal Challengers Bangalore  Royal Challengers Bangalore         field   \n",
              "791                Pune Warriors             Rajasthan Royals           bat   \n",
              "792                Pune Warriors             Rajasthan Royals           bat   \n",
              "\n",
              "     result  dl_applied                       winner  win_by_runs  \\\n",
              "0    normal           0          Sunrisers Hyderabad           35   \n",
              "1    normal           0          Sunrisers Hyderabad           35   \n",
              "2    normal           0       Rising Pune Supergiant            0   \n",
              "3    normal           0       Rising Pune Supergiant            0   \n",
              "4    normal           0        Kolkata Knight Riders            0   \n",
              "..      ...         ...                          ...          ...   \n",
              "788  normal           0          Chennai Super Kings            0   \n",
              "789  normal           0  Royal Challengers Bangalore            0   \n",
              "790  normal           0  Royal Challengers Bangalore            0   \n",
              "791  normal           0                Pune Warriors            0   \n",
              "792  normal           0                Pune Warriors            0   \n",
              "\n",
              "     win_by_wickets player_of_match  \\\n",
              "0                 0    Yuvraj Singh   \n",
              "1                 0    Yuvraj Singh   \n",
              "2                 7       SPD Smith   \n",
              "3                 7       SPD Smith   \n",
              "4                10         CA Lynn   \n",
              "..              ...             ...   \n",
              "788              10      MEK Hussey   \n",
              "789               8        CH Gayle   \n",
              "790               8        CH Gayle   \n",
              "791               7        AJ Finch   \n",
              "792               7        AJ Finch   \n",
              "\n",
              "                                          venue         umpire1  \\\n",
              "0     Rajiv Gandhi International Stadium, Uppal     AY Dandekar   \n",
              "1     Rajiv Gandhi International Stadium, Uppal     AY Dandekar   \n",
              "2       Maharashtra Cricket Association Stadium  A Nand Kishore   \n",
              "3       Maharashtra Cricket Association Stadium  A Nand Kishore   \n",
              "4        Saurashtra Cricket Association Stadium     Nitin Menon   \n",
              "..                                          ...             ...   \n",
              "788  Punjab Cricket Association Stadium, Mohali       Aleem Dar   \n",
              "789                       M Chinnaswamy Stadium       Asad Rauf   \n",
              "790                       M Chinnaswamy Stadium       Asad Rauf   \n",
              "791                  Subrata Roy Sahara Stadium       M Erasmus   \n",
              "792                  Subrata Roy Sahara Stadium       M Erasmus   \n",
              "\n",
              "           umpire2 umpire3  match_id  total_runs  \n",
              "0         NJ Llong     NaN         1       207.0  \n",
              "1         NJ Llong     NaN         1       172.0  \n",
              "2           S Ravi     NaN         2       184.0  \n",
              "3           S Ravi     NaN         2       187.0  \n",
              "4        CK Nandan     NaN         3       183.0  \n",
              "..             ...     ...       ...         ...  \n",
              "788  C Shamshuddin     NaN       391       139.0  \n",
              "789   AK Chaudhary     NaN       392       154.0  \n",
              "790   AK Chaudhary     NaN       392       158.0  \n",
              "791      K Srinath     NaN       393       145.0  \n",
              "792      K Srinath     NaN       393        85.0  \n",
              "\n",
              "[793 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26373d51-8058-4e09-a6e8-e3016fa6b4b7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Season</th>\n",
              "      <th>city</th>\n",
              "      <th>date</th>\n",
              "      <th>team1</th>\n",
              "      <th>team2</th>\n",
              "      <th>toss_winner</th>\n",
              "      <th>toss_decision</th>\n",
              "      <th>result</th>\n",
              "      <th>dl_applied</th>\n",
              "      <th>winner</th>\n",
              "      <th>win_by_runs</th>\n",
              "      <th>win_by_wickets</th>\n",
              "      <th>player_of_match</th>\n",
              "      <th>venue</th>\n",
              "      <th>umpire1</th>\n",
              "      <th>umpire2</th>\n",
              "      <th>umpire3</th>\n",
              "      <th>match_id</th>\n",
              "      <th>total_runs</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>IPL-2017</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>05-04-2017</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>Yuvraj Singh</td>\n",
              "      <td>Rajiv Gandhi International Stadium, Uppal</td>\n",
              "      <td>AY Dandekar</td>\n",
              "      <td>NJ Llong</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>207.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>IPL-2017</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>05-04-2017</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>Yuvraj Singh</td>\n",
              "      <td>Rajiv Gandhi International Stadium, Uppal</td>\n",
              "      <td>AY Dandekar</td>\n",
              "      <td>NJ Llong</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>172.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>IPL-2017</td>\n",
              "      <td>Pune</td>\n",
              "      <td>06-04-2017</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>SPD Smith</td>\n",
              "      <td>Maharashtra Cricket Association Stadium</td>\n",
              "      <td>A Nand Kishore</td>\n",
              "      <td>S Ravi</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>184.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>IPL-2017</td>\n",
              "      <td>Pune</td>\n",
              "      <td>06-04-2017</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>SPD Smith</td>\n",
              "      <td>Maharashtra Cricket Association Stadium</td>\n",
              "      <td>A Nand Kishore</td>\n",
              "      <td>S Ravi</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>187.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>IPL-2017</td>\n",
              "      <td>Rajkot</td>\n",
              "      <td>07-04-2017</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>CA Lynn</td>\n",
              "      <td>Saurashtra Cricket Association Stadium</td>\n",
              "      <td>Nitin Menon</td>\n",
              "      <td>CK Nandan</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>183.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>788</th>\n",
              "      <td>391</td>\n",
              "      <td>IPL-2013</td>\n",
              "      <td>Chandigarh</td>\n",
              "      <td>10-04-2013</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>MEK Hussey</td>\n",
              "      <td>Punjab Cricket Association Stadium, Mohali</td>\n",
              "      <td>Aleem Dar</td>\n",
              "      <td>C Shamshuddin</td>\n",
              "      <td>NaN</td>\n",
              "      <td>391</td>\n",
              "      <td>139.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>789</th>\n",
              "      <td>392</td>\n",
              "      <td>IPL-2013</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>11-04-2013</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>M Chinnaswamy Stadium</td>\n",
              "      <td>Asad Rauf</td>\n",
              "      <td>AK Chaudhary</td>\n",
              "      <td>NaN</td>\n",
              "      <td>392</td>\n",
              "      <td>154.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>790</th>\n",
              "      <td>392</td>\n",
              "      <td>IPL-2013</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>11-04-2013</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>M Chinnaswamy Stadium</td>\n",
              "      <td>Asad Rauf</td>\n",
              "      <td>AK Chaudhary</td>\n",
              "      <td>NaN</td>\n",
              "      <td>392</td>\n",
              "      <td>158.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>791</th>\n",
              "      <td>393</td>\n",
              "      <td>IPL-2013</td>\n",
              "      <td>Pune</td>\n",
              "      <td>11-04-2013</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>Pune Warriors</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>bat</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Pune Warriors</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>AJ Finch</td>\n",
              "      <td>Subrata Roy Sahara Stadium</td>\n",
              "      <td>M Erasmus</td>\n",
              "      <td>K Srinath</td>\n",
              "      <td>NaN</td>\n",
              "      <td>393</td>\n",
              "      <td>145.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>792</th>\n",
              "      <td>393</td>\n",
              "      <td>IPL-2013</td>\n",
              "      <td>Pune</td>\n",
              "      <td>11-04-2013</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>Pune Warriors</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>bat</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Pune Warriors</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>AJ Finch</td>\n",
              "      <td>Subrata Roy Sahara Stadium</td>\n",
              "      <td>M Erasmus</td>\n",
              "      <td>K Srinath</td>\n",
              "      <td>NaN</td>\n",
              "      <td>393</td>\n",
              "      <td>85.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>793 rows Ã— 20 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26373d51-8058-4e09-a6e8-e3016fa6b4b7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-26373d51-8058-4e09-a6e8-e3016fa6b4b7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-26373d51-8058-4e09-a6e8-e3016fa6b4b7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "match_df['team1'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZUzbyHFUypJ5",
        "outputId": "6e500f6e-5b64-4a8f-c11e-1c824cc4a837"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n",
              "       'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n",
              "       'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n",
              "       'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n",
              "       'Kochi Tuskers Kerala', 'Pune Warriors'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "teams = [\n",
        "    'Sunrisers Hyderabad',\n",
        "    'Mumbai Indians',\n",
        "    'Royal Challengers Bangalore',\n",
        "    'Kolkata Knight Riders',\n",
        "    'Kings XI Punjab',\n",
        "    'Chennai Super Kings',\n",
        "    'Rajasthan Royals',\n",
        "    'Delhi Capitals'\n",
        "]"
      ],
      "metadata": {
        "id": "JeXEBDIkzqX6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "match_df['team1'] = match_df['team1'].str.replace('Delhi Daredevils','Delhi Capitals')\n",
        "match_df['team2'] = match_df['team2'].str.replace('Delhi Daredevils','Delhi Capitals')\n",
        "\n",
        "match_df['team1'] = match_df['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')\n",
        "match_df['team2'] = match_df['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')"
      ],
      "metadata": {
        "id": "vD2ifm2vggq2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "match_df = match_df[match_df['team1'].isin(teams)]\n",
        "match_df = match_df[match_df['team2'].isin(teams)]\n"
      ],
      "metadata": {
        "id": "VrdCnCdMg9Yb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "match_df.shape"
      ],
      "metadata": {
        "id": "cc0gbAishAOB",
        "outputId": "9c2d5a2f-6ae9-4d78-8ead-47a27b3959a1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(644, 20)"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "match_df = [match_df['dl_applied']==0]"
      ],
      "metadata": {
        "id": "XsvMb05ij3DP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "match_df = match_df[['match_id', 'city', 'winner', 'total_runs']]"
      ],
      "metadata": {
        "id": "w6c2j1ggknEn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "delivery_df = match_df.merge(deliveries, on= 'match_id')\n",
        "delivery_df = delivery_df[delivery_df['inning']==2]\n",
        "delivery_df"
      ],
      "metadata": {
        "id": "9yufuJFcldY-",
        "outputId": "7cb6e30a-e361-44e2-f2d8-9cb1155acfc8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 834
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        match_id       city                       winner  total_runs_x  \\\n",
              "125            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "126            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "127            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "128            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "129            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "...          ...        ...                          ...           ...   \n",
              "153147       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "153148       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "153149       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "153150       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "153151       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "\n",
              "        inning                 batting_team           bowling_team  over  \\\n",
              "125          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "126          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "127          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "128          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "129          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "...        ...                          ...                    ...   ...   \n",
              "153147       2  Royal Challengers Bangalore  Kolkata Knight Riders  17.0   \n",
              "153148       2  Royal Challengers Bangalore  Kolkata Knight Riders  18.0   \n",
              "153149       2  Royal Challengers Bangalore  Kolkata Knight Riders  18.0   \n",
              "153150       2  Royal Challengers Bangalore  Kolkata Knight Riders  18.0   \n",
              "153151       2  Royal Challengers Bangalore  Kolkata Knight Riders  18.0   \n",
              "\n",
              "        ball         batsman  ... bye_runs legbye_runs  noball_runs  \\\n",
              "125      1.0        CH Gayle  ...      0.0         0.0          0.0   \n",
              "126      2.0   Mandeep Singh  ...      0.0         0.0          0.0   \n",
              "127      3.0   Mandeep Singh  ...      0.0         0.0          0.0   \n",
              "128      4.0   Mandeep Singh  ...      0.0         0.0          0.0   \n",
              "129      5.0   Mandeep Singh  ...      0.0         0.0          0.0   \n",
              "...      ...             ...  ...      ...         ...          ...   \n",
              "153147   7.0  AB de Villiers  ...      0.0         0.0          0.0   \n",
              "153148   1.0        CH Gayle  ...      0.0         0.0          0.0   \n",
              "153149   2.0        CH Gayle  ...      0.0         0.0          0.0   \n",
              "153150   3.0        CH Gayle  ...      0.0         0.0          0.0   \n",
              "153151   4.0        CH Gayle  ...      0.0         0.0          0.0   \n",
              "\n",
              "        penalty_runs  batsman_runs  extra_runs  total_runs_y  \\\n",
              "125              0.0           1.0         0.0           1.0   \n",
              "126              0.0           0.0         0.0           0.0   \n",
              "127              0.0           0.0         0.0           0.0   \n",
              "128              0.0           2.0         0.0           2.0   \n",
              "129              0.0           4.0         0.0           4.0   \n",
              "...              ...           ...         ...           ...   \n",
              "153147           0.0           0.0         0.0           0.0   \n",
              "153148           0.0           0.0         0.0           0.0   \n",
              "153149           0.0           6.0         0.0           6.0   \n",
              "153150           0.0           0.0         1.0           1.0   \n",
              "153151           0.0           6.0         0.0           6.0   \n",
              "\n",
              "        player_dismissed  dismissal_kind  fielder  \n",
              "125                  NaN             NaN      NaN  \n",
              "126                  NaN             NaN      NaN  \n",
              "127                  NaN             NaN      NaN  \n",
              "128                  NaN             NaN      NaN  \n",
              "129                  NaN             NaN      NaN  \n",
              "...                  ...             ...      ...  \n",
              "153147               NaN             NaN      NaN  \n",
              "153148               NaN             NaN      NaN  \n",
              "153149               NaN             NaN      NaN  \n",
              "153150               NaN             NaN      NaN  \n",
              "153151               NaN             NaN      NaN  \n",
              "\n",
              "[73720 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea9ef198-64e8-4fda-979c-08c5ec3486cf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_id</th>\n",
              "      <th>city</th>\n",
              "      <th>winner</th>\n",
              "      <th>total_runs_x</th>\n",
              "      <th>inning</th>\n",
              "      <th>batting_team</th>\n",
              "      <th>bowling_team</th>\n",
              "      <th>over</th>\n",
              "      <th>ball</th>\n",
              "      <th>batsman</th>\n",
              "      <th>...</th>\n",
              "      <th>bye_runs</th>\n",
              "      <th>legbye_runs</th>\n",
              "      <th>noball_runs</th>\n",
              "      <th>penalty_runs</th>\n",
              "      <th>batsman_runs</th>\n",
              "      <th>extra_runs</th>\n",
              "      <th>total_runs_y</th>\n",
              "      <th>player_dismissed</th>\n",
              "      <th>dismissal_kind</th>\n",
              "      <th>fielder</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153147</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>17.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>AB de Villiers</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153148</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>18.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153149</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>18.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153150</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>18.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153151</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>18.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>73720 rows Ã— 24 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea9ef198-64e8-4fda-979c-08c5ec3486cf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ea9ef198-64e8-4fda-979c-08c5ec3486cf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ea9ef198-64e8-4fda-979c-08c5ec3486cf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "delivery_df['current_score'] = delivery_df.groupby('match_id').cumsum()['total_runs_y']"
      ],
      "metadata": {
        "id": "sP70nv2elxOR",
        "outputId": "3f5cc145-19d2-42ad-b543-674851d3aff2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-27-cafdf4636499>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.cumsum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
            "  delivery_df['current_score'] = delivery_df.groupby('match_id').cumsum()['total_runs_y']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "delivery_df['runs_left'] = delivery_df['total_runs_x'] - delivery_df['current_score']\n",
        "delivery_df['balls_left'] = 126 - (delivery_df['over']*6 + delivery_df['ball'])\n",
        "delivery_df"
      ],
      "metadata": {
        "id": "suG3hvTQmXDR",
        "outputId": "ab0108d5-67f6-43a3-8431-f28ad4390823",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 834
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        match_id       city                       winner  total_runs_x  \\\n",
              "125            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "126            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "127            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "128            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "129            1  Hyderabad          Sunrisers Hyderabad         207.0   \n",
              "...          ...        ...                          ...           ...   \n",
              "153147       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "153148       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "153149       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "153150       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "153151       392  Bangalore  Royal Challengers Bangalore         158.0   \n",
              "\n",
              "        inning                 batting_team           bowling_team  over  \\\n",
              "125          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "126          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "127          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "128          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "129          2  Royal Challengers Bangalore    Sunrisers Hyderabad   1.0   \n",
              "...        ...                          ...                    ...   ...   \n",
              "153147       2  Royal Challengers Bangalore  Kolkata Knight Riders  17.0   \n",
              "153148       2  Royal Challengers Bangalore  Kolkata Knight Riders  18.0   \n",
              "153149       2  Royal Challengers Bangalore  Kolkata Knight Riders  18.0   \n",
              "153150       2  Royal Challengers Bangalore  Kolkata Knight Riders  18.0   \n",
              "153151       2  Royal Challengers Bangalore  Kolkata Knight Riders  18.0   \n",
              "\n",
              "        ball         batsman  ... penalty_runs batsman_runs  extra_runs  \\\n",
              "125      1.0        CH Gayle  ...          0.0          1.0         0.0   \n",
              "126      2.0   Mandeep Singh  ...          0.0          0.0         0.0   \n",
              "127      3.0   Mandeep Singh  ...          0.0          0.0         0.0   \n",
              "128      4.0   Mandeep Singh  ...          0.0          2.0         0.0   \n",
              "129      5.0   Mandeep Singh  ...          0.0          4.0         0.0   \n",
              "...      ...             ...  ...          ...          ...         ...   \n",
              "153147   7.0  AB de Villiers  ...          0.0          0.0         0.0   \n",
              "153148   1.0        CH Gayle  ...          0.0          0.0         0.0   \n",
              "153149   2.0        CH Gayle  ...          0.0          6.0         0.0   \n",
              "153150   3.0        CH Gayle  ...          0.0          0.0         1.0   \n",
              "153151   4.0        CH Gayle  ...          0.0          6.0         0.0   \n",
              "\n",
              "        total_runs_y  player_dismissed  dismissal_kind  fielder  \\\n",
              "125              1.0               NaN             NaN      NaN   \n",
              "126              0.0               NaN             NaN      NaN   \n",
              "127              0.0               NaN             NaN      NaN   \n",
              "128              2.0               NaN             NaN      NaN   \n",
              "129              4.0               NaN             NaN      NaN   \n",
              "...              ...               ...             ...      ...   \n",
              "153147           0.0               NaN             NaN      NaN   \n",
              "153148           0.0               NaN             NaN      NaN   \n",
              "153149           6.0               NaN             NaN      NaN   \n",
              "153150           1.0               NaN             NaN      NaN   \n",
              "153151           6.0               NaN             NaN      NaN   \n",
              "\n",
              "        current_score  runs_left  balls_left  \n",
              "125               1.0      206.0       119.0  \n",
              "126               1.0      206.0       118.0  \n",
              "127               1.0      206.0       117.0  \n",
              "128               3.0      204.0       116.0  \n",
              "129               7.0      200.0       115.0  \n",
              "...               ...        ...         ...  \n",
              "153147          303.0     -145.0        17.0  \n",
              "153148          303.0     -145.0        17.0  \n",
              "153149          309.0     -151.0        16.0  \n",
              "153150          310.0     -152.0        15.0  \n",
              "153151          316.0     -158.0        14.0  \n",
              "\n",
              "[73720 rows x 27 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-56dff5c7-c4df-4579-9993-ffea6d893aa5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_id</th>\n",
              "      <th>city</th>\n",
              "      <th>winner</th>\n",
              "      <th>total_runs_x</th>\n",
              "      <th>inning</th>\n",
              "      <th>batting_team</th>\n",
              "      <th>bowling_team</th>\n",
              "      <th>over</th>\n",
              "      <th>ball</th>\n",
              "      <th>batsman</th>\n",
              "      <th>...</th>\n",
              "      <th>penalty_runs</th>\n",
              "      <th>batsman_runs</th>\n",
              "      <th>extra_runs</th>\n",
              "      <th>total_runs_y</th>\n",
              "      <th>player_dismissed</th>\n",
              "      <th>dismissal_kind</th>\n",
              "      <th>fielder</th>\n",
              "      <th>current_score</th>\n",
              "      <th>runs_left</th>\n",
              "      <th>balls_left</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>206.0</td>\n",
              "      <td>119.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>206.0</td>\n",
              "      <td>118.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>206.0</td>\n",
              "      <td>117.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>204.0</td>\n",
              "      <td>116.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>115.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153147</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>17.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>AB de Villiers</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>303.0</td>\n",
              "      <td>-145.0</td>\n",
              "      <td>17.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153148</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>18.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>303.0</td>\n",
              "      <td>-145.0</td>\n",
              "      <td>17.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153149</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>18.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>309.0</td>\n",
              "      <td>-151.0</td>\n",
              "      <td>16.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153150</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>18.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>310.0</td>\n",
              "      <td>-152.0</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153151</th>\n",
              "      <td>392</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>158.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>18.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>316.0</td>\n",
              "      <td>-158.0</td>\n",
              "      <td>14.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>73720 rows Ã— 27 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-56dff5c7-c4df-4579-9993-ffea6d893aa5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-56dff5c7-c4df-4579-9993-ffea6d893aa5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-56dff5c7-c4df-4579-9993-ffea6d893aa5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "delivery_df['player_dismissed'] = delivery_df['player_dismissed'].fillna(\"0\")\n",
        "delivery_df['player_dismissed'] = delivery_df['player_dismissed'].apply(lambda x:x if x == \"0\" else \"1\")\n",
        "delivery_df['player_dismissed'] = delivery_df['player_dismissed'].astype('int')\n",
        "wickets = delivery_df.groupby('match_id').cumsum()['player_dismissed'].values\n",
        "delivery_df['wickets'] = 10 - wickets\n",
        "delivery_df.head()"
      ],
      "metadata": {
        "id": "-sMbWrYymqOY",
        "outputId": "6138dd3f-c440-49ca-b32b-f08caa753cee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-29-5cbb94c1e6d2>:4: FutureWarning: The default value of numeric_only in DataFrameGroupBy.cumsum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
            "  wickets = delivery_df.groupby('match_id').cumsum()['player_dismissed'].values\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     match_id       city               winner  total_runs_x  inning  \\\n",
              "125         1  Hyderabad  Sunrisers Hyderabad         207.0       2   \n",
              "126         1  Hyderabad  Sunrisers Hyderabad         207.0       2   \n",
              "127         1  Hyderabad  Sunrisers Hyderabad         207.0       2   \n",
              "128         1  Hyderabad  Sunrisers Hyderabad         207.0       2   \n",
              "129         1  Hyderabad  Sunrisers Hyderabad         207.0       2   \n",
              "\n",
              "                    batting_team         bowling_team  over  ball  \\\n",
              "125  Royal Challengers Bangalore  Sunrisers Hyderabad   1.0   1.0   \n",
              "126  Royal Challengers Bangalore  Sunrisers Hyderabad   1.0   2.0   \n",
              "127  Royal Challengers Bangalore  Sunrisers Hyderabad   1.0   3.0   \n",
              "128  Royal Challengers Bangalore  Sunrisers Hyderabad   1.0   4.0   \n",
              "129  Royal Challengers Bangalore  Sunrisers Hyderabad   1.0   5.0   \n",
              "\n",
              "           batsman  ... batsman_runs extra_runs  total_runs_y  \\\n",
              "125       CH Gayle  ...          1.0        0.0           1.0   \n",
              "126  Mandeep Singh  ...          0.0        0.0           0.0   \n",
              "127  Mandeep Singh  ...          0.0        0.0           0.0   \n",
              "128  Mandeep Singh  ...          2.0        0.0           2.0   \n",
              "129  Mandeep Singh  ...          4.0        0.0           4.0   \n",
              "\n",
              "     player_dismissed  dismissal_kind  fielder  current_score  runs_left  \\\n",
              "125                 0             NaN      NaN            1.0      206.0   \n",
              "126                 0             NaN      NaN            1.0      206.0   \n",
              "127                 0             NaN      NaN            1.0      206.0   \n",
              "128                 0             NaN      NaN            3.0      204.0   \n",
              "129                 0             NaN      NaN            7.0      200.0   \n",
              "\n",
              "     balls_left  wickets  \n",
              "125       119.0       10  \n",
              "126       118.0       10  \n",
              "127       117.0       10  \n",
              "128       116.0       10  \n",
              "129       115.0       10  \n",
              "\n",
              "[5 rows x 28 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5b0bc8b2-0b39-4a2b-a9ff-a1d516521add\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>match_id</th>\n",
              "      <th>city</th>\n",
              "      <th>winner</th>\n",
              "      <th>total_runs_x</th>\n",
              "      <th>inning</th>\n",
              "      <th>batting_team</th>\n",
              "      <th>bowling_team</th>\n",
              "      <th>over</th>\n",
              "      <th>ball</th>\n",
              "      <th>batsman</th>\n",
              "      <th>...</th>\n",
              "      <th>batsman_runs</th>\n",
              "      <th>extra_runs</th>\n",
              "      <th>total_runs_y</th>\n",
              "      <th>player_dismissed</th>\n",
              "      <th>dismissal_kind</th>\n",
              "      <th>fielder</th>\n",
              "      <th>current_score</th>\n",
              "      <th>runs_left</th>\n",
              "      <th>balls_left</th>\n",
              "      <th>wickets</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>CH Gayle</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>206.0</td>\n",
              "      <td>119.0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>206.0</td>\n",
              "      <td>118.0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>206.0</td>\n",
              "      <td>117.0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>204.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>207.0</td>\n",
              "      <td>2</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Mandeep Singh</td>\n",
              "      <td>...</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>115.0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 28 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b0bc8b2-0b39-4a2b-a9ff-a1d516521add')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5b0bc8b2-0b39-4a2b-a9ff-a1d516521add button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5b0bc8b2-0b39-4a2b-a9ff-a1d516521add');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# crr = runs/overs\n",
        "delivery_df['crr'] = (delivery_df['current_score']*6)/(120 - delivery_df['balls_left'])\n",
        "delivery_df['rrr'] = (delivery_df['runs_left']*6)/delivery_df['balls_left']\n",
        "def result(row):\n",
        "    return 1 if row['batting_team'] == row['winner'] else 0\n",
        "delivery_df['result'] = delivery_df.apply(result,axis=1)"
      ],
      "metadata": {
        "id": "nhQ-1RDjm2-y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "final_df = delivery_df[['batting_team','bowling_team','city','runs_left','balls_left','wickets','total_runs_x','crr','rrr','result']]\n",
        "final_df = final_df.sample(final_df.shape[0])\n",
        "final_df.sample()"
      ],
      "metadata": {
        "id": "4I5dozTNnSna",
        "outputId": "2e45e35d-71b2-4069-fef9-647b512f1353",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      batting_team     bowling_team        city  runs_left  \\\n",
              "84376  Royal Challengers Bangalore  Kings XI Punjab  Chandigarh      166.0   \n",
              "\n",
              "       balls_left  wickets  total_runs_x       crr       rrr  result  \n",
              "84376       106.0       10         181.0  6.428571  9.396226       1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b2e9cf6-cde7-4db5-aca5-14618e5facf0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>batting_team</th>\n",
              "      <th>bowling_team</th>\n",
              "      <th>city</th>\n",
              "      <th>runs_left</th>\n",
              "      <th>balls_left</th>\n",
              "      <th>wickets</th>\n",
              "      <th>total_runs_x</th>\n",
              "      <th>crr</th>\n",
              "      <th>rrr</th>\n",
              "      <th>result</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>84376</th>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>Chandigarh</td>\n",
              "      <td>166.0</td>\n",
              "      <td>106.0</td>\n",
              "      <td>10</td>\n",
              "      <td>181.0</td>\n",
              "      <td>6.428571</td>\n",
              "      <td>9.396226</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b2e9cf6-cde7-4db5-aca5-14618e5facf0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9b2e9cf6-cde7-4db5-aca5-14618e5facf0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9b2e9cf6-cde7-4db5-aca5-14618e5facf0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "final_df.dropna(inplace=True)\n",
        "final_df = final_df[final_df['balls_left'] != 0]\n",
        "X = final_df.iloc[:,:-1]\n",
        "y = final_df.iloc[:,-1]\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)\n",
        "X_train"
      ],
      "metadata": {
        "id": "xzuYp9BuneiD",
        "outputId": "40c56d90-5a0a-4c51-d1f5-87ca955c3763",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       batting_team         bowling_team            city  \\\n",
              "8781          Kolkata Knight Riders  Sunrisers Hyderabad       Hyderabad   \n",
              "99025         Kolkata Knight Riders  Chennai Super Kings         Chennai   \n",
              "5312                Kings XI Punjab  Sunrisers Hyderabad       Hyderabad   \n",
              "113119             Rajasthan Royals  Chennai Super Kings          Jaipur   \n",
              "71324           Chennai Super Kings      Deccan Chargers         Chennai   \n",
              "...                             ...                  ...             ...   \n",
              "43288   Royal Challengers Bangalore  Chennai Super Kings  Port Elizabeth   \n",
              "121605              Kings XI Punjab     Rajasthan Royals          Jaipur   \n",
              "109896              Kings XI Punjab       Mumbai Indians          Mumbai   \n",
              "57373              Delhi Daredevils       Mumbai Indians     East London   \n",
              "7573          Kolkata Knight Riders     Delhi Daredevils         Kolkata   \n",
              "\n",
              "        runs_left  balls_left  wickets  total_runs_x        crr        rrr  \n",
              "8781        -16.0       102.0        1         161.0  59.000000  -0.941176  \n",
              "99025       -39.0        96.0        3         151.0  47.500000  -2.437500  \n",
              "5312       -115.0        26.0       -6         154.0  17.170213 -26.538462  \n",
              "113119      183.0       113.0       10         196.0  11.142857   9.716814  \n",
              "71324       103.0        43.0        5         190.0   6.779221  14.372093  \n",
              "...           ...         ...      ...           ...        ...        ...  \n",
              "43288       -31.0        96.0       -1          87.0  29.500000  -1.937500  \n",
              "121605      -40.0        89.0        0         160.0  38.709677  -2.696629  \n",
              "109896       41.0        17.0        4         159.0   6.873786  14.470588  \n",
              "57373       -78.0        29.0        5         118.0  12.923077 -16.137931  \n",
              "7573       -133.0        39.0        5         161.0  21.777778 -20.461538  \n",
              "\n",
              "[58769 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2050123f-a495-48ab-8f83-808c5e9c67e8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>batting_team</th>\n",
              "      <th>bowling_team</th>\n",
              "      <th>city</th>\n",
              "      <th>runs_left</th>\n",
              "      <th>balls_left</th>\n",
              "      <th>wickets</th>\n",
              "      <th>total_runs_x</th>\n",
              "      <th>crr</th>\n",
              "      <th>rrr</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8781</th>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>-16.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>1</td>\n",
              "      <td>161.0</td>\n",
              "      <td>59.000000</td>\n",
              "      <td>-0.941176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99025</th>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>-39.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>3</td>\n",
              "      <td>151.0</td>\n",
              "      <td>47.500000</td>\n",
              "      <td>-2.437500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5312</th>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>-115.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>-6</td>\n",
              "      <td>154.0</td>\n",
              "      <td>17.170213</td>\n",
              "      <td>-26.538462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113119</th>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>Jaipur</td>\n",
              "      <td>183.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>10</td>\n",
              "      <td>196.0</td>\n",
              "      <td>11.142857</td>\n",
              "      <td>9.716814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71324</th>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>Deccan Chargers</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>103.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>5</td>\n",
              "      <td>190.0</td>\n",
              "      <td>6.779221</td>\n",
              "      <td>14.372093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43288</th>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Chennai Super Kings</td>\n",
              "      <td>Port Elizabeth</td>\n",
              "      <td>-31.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>-1</td>\n",
              "      <td>87.0</td>\n",
              "      <td>29.500000</td>\n",
              "      <td>-1.937500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121605</th>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>Rajasthan Royals</td>\n",
              "      <td>Jaipur</td>\n",
              "      <td>-40.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>38.709677</td>\n",
              "      <td>-2.696629</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109896</th>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>41.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>4</td>\n",
              "      <td>159.0</td>\n",
              "      <td>6.873786</td>\n",
              "      <td>14.470588</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57373</th>\n",
              "      <td>Delhi Daredevils</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>East London</td>\n",
              "      <td>-78.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>5</td>\n",
              "      <td>118.0</td>\n",
              "      <td>12.923077</td>\n",
              "      <td>-16.137931</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7573</th>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Delhi Daredevils</td>\n",
              "      <td>Kolkata</td>\n",
              "      <td>-133.0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>5</td>\n",
              "      <td>161.0</td>\n",
              "      <td>21.777778</td>\n",
              "      <td>-20.461538</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>58769 rows Ã— 9 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2050123f-a495-48ab-8f83-808c5e9c67e8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2050123f-a495-48ab-8f83-808c5e9c67e8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2050123f-a495-48ab-8f83-808c5e9c67e8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "trf = ColumnTransformer([\n",
        "    ('trf',OneHotEncoder(sparse=False,drop='first'),['batting_team','bowling_team','city'])\n",
        "]\n",
        ",remainder='passthrough')"
      ],
      "metadata": {
        "id": "DQZROVC2n7ma"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.pipeline import Pipeline"
      ],
      "metadata": {
        "id": "SjOUIec4pB0I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pipe = Pipeline(steps=[\n",
        "    ('step1',trf),\n",
        "    ('step2',LogisticRegression(solver='liblinear'))\n",
        "])\n",
        "pipe.fit(X_train,y_train)"
      ],
      "metadata": {
        "id": "DFb_1YgYpE0e",
        "outputId": "bcaab772-55e6-4263-8d11-51e0d74bcafe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('step1',\n",
              "                 ColumnTransformer(remainder='passthrough',\n",
              "                                   transformers=[('trf',\n",
              "                                                  OneHotEncoder(drop='first',\n",
              "                                                                sparse=False),\n",
              "                                                  ['batting_team',\n",
              "                                                   'bowling_team', 'city'])])),\n",
              "                ('step2', LogisticRegression(solver='liblinear'))])"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;step1&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;trf&#x27;,\n",
              "                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n",
              "                                                                sparse=False),\n",
              "                                                  [&#x27;batting_team&#x27;,\n",
              "                                                   &#x27;bowling_team&#x27;, &#x27;city&#x27;])])),\n",
              "                (&#x27;step2&#x27;, LogisticRegression(solver=&#x27;liblinear&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;step1&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;trf&#x27;,\n",
              "                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n",
              "                                                                sparse=False),\n",
              "                                                  [&#x27;batting_team&#x27;,\n",
              "                                                   &#x27;bowling_team&#x27;, &#x27;city&#x27;])])),\n",
              "                (&#x27;step2&#x27;, LogisticRegression(solver=&#x27;liblinear&#x27;))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">step1: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                  transformers=[(&#x27;trf&#x27;,\n",
              "                                 OneHotEncoder(drop=&#x27;first&#x27;, sparse=False),\n",
              "                                 [&#x27;batting_team&#x27;, &#x27;bowling_team&#x27;, &#x27;city&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">trf</label><div class=\"sk-toggleable__content\"><pre>[&#x27;batting_team&#x27;, &#x27;bowling_team&#x27;, &#x27;city&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, sparse=False)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[&#x27;runs_left&#x27;, &#x27;balls_left&#x27;, &#x27;wickets&#x27;, &#x27;total_runs_x&#x27;, &#x27;crr&#x27;, &#x27;rrr&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = pipe.predict(X_test)\n",
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_test,y_pred)"
      ],
      "metadata": {
        "id": "1UTW0HKxpMUQ",
        "outputId": "3fd0d7f1-6330-459e-f0af-b627dd64540f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8380181038589805"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pipe.predict_proba(X_test)[10]"
      ],
      "metadata": {
        "id": "IQlSZSXcpQ-z",
        "outputId": "d4c37ed4-3daa-45c9-e77e-0687a7c12189",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.13721443, 0.86278557])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def match_summary(row):\n",
        "    print(\"Batting Team-\" + row['batting_team'] + \" | Bowling Team-\" + row['bowling_team'] + \" | Target- \" + str(row['total_runs_x']))\n",
        ""
      ],
      "metadata": {
        "id": "wY6a6lPMpYSw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def match_progression(x_df,match_ID,pipe):\n",
        "    match = x_df[x_df['match_id'] == match_ID]\n",
        "    match = match[(match['ball'] == 6)]\n",
        "    temp_df = match[['batting_team','bowling_team','city','runs_left','balls_left','wickets','total_runs_x','crr','rrr']].dropna()\n",
        "    temp_df = temp_df[temp_df['balls_left'] != 0]\n",
        "    result = pipe.predict_proba(temp_df)\n",
        "    temp_df['lose'] = np.round(result.T[0]*100,1)\n",
        "    temp_df['win'] = np.round(result.T[1]*100,1)\n",
        "    temp_df['end_of_over'] = range(1,temp_df.shape[0]+1)\n",
        "\n",
        "    target = temp_df['total_runs_x'].values[0]\n",
        "    runs = list(temp_df['runs_left'].values)\n",
        "    new_runs = runs[:]\n",
        "    runs.insert(0,target)\n",
        "    temp_df['runs_after_over'] = np.array(runs)[:-1] - np.array(new_runs)\n",
        "    wickets = list(temp_df['wickets'].values)\n",
        "    new_wickets = wickets[:]\n",
        "    new_wickets.insert(0,10)\n",
        "    wickets.append(0)\n",
        "    w = np.array(wickets)\n",
        "    nw = np.array(new_wickets)\n",
        "    temp_df['wickets_in_over'] = (nw - w)[0:temp_df.shape[0]]\n",
        "\n",
        "    print(\"Target-\",target)\n",
        "    temp_df = temp_df[['end_of_over','runs_after_over','wickets_in_over','lose','win']]\n",
        "    return temp_df,target\n",
        ""
      ],
      "metadata": {
        "id": "J6hvsHhwpZIi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "match_ID = int(input(print(\"Enter any match ID \")))\n",
        "temp_df, target = match_progression(delivery_df, match_ID ,pipe)\n",
        "temp_df"
      ],
      "metadata": {
        "id": "2YF_gMLVpd4S",
        "outputId": "08b871f9-3df5-46a1-d068-dbde930e6149",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter any match ID \n",
            "None75\n",
            "Target- 137.0\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       end_of_over  runs_after_over  wickets_in_over  lose   win\n",
              "21600            1              2.0                0  20.8  79.2\n",
              "21608            2             14.0                0  14.5  85.5\n",
              "21614            3              1.0                1  28.5  71.5\n",
              "21621            4              8.0                1  43.0  57.0\n",
              "21627            5              4.0                1  61.9  38.1\n",
              "21633            6              9.0                0  55.0  45.0\n",
              "21639            7              5.0                0  51.1  48.9\n",
              "21645            8              4.0                0  47.9  52.1\n",
              "21651            9             16.0                0  35.8  64.2\n",
              "21658           10              6.0                0  31.6  68.4\n",
              "21665           11              6.0                0  27.7  72.3\n",
              "21671           12             15.0                0  19.3  80.7\n",
              "21677           13              8.0                0  15.7  84.3\n",
              "21683           14              4.0                0  14.1  85.9\n",
              "21689           15              8.0                0  11.3  88.7\n",
              "21695           16             11.0                0   8.3  91.7\n",
              "21701           17              7.0                0   6.8  93.2\n",
              "21708           18              4.0                0   6.0  94.0\n",
              "21843           19              7.0                0   5.0  95.0\n",
              "21851           20             14.0                0   3.4  96.6\n",
              "21857           21              1.0                1   7.6  92.4\n",
              "21864           22              8.0                1  13.6  86.4\n",
              "21870           23              4.0                1  25.3  74.7\n",
              "21876           24              9.0                0  20.4  79.6\n",
              "21882           25              5.0                0  17.9  82.1\n",
              "21888           26              4.0                0  16.1  83.9\n",
              "21894           27             16.0                0  10.5  89.5\n",
              "21901           28              6.0                0   8.8  91.2\n",
              "21908           29              6.0                0   7.4  92.6\n",
              "21914           30             15.0                0   4.8  95.2\n",
              "21920           31              8.0                0   3.8  96.2\n",
              "21926           32              4.0                0   3.3  96.7\n",
              "21932           33              8.0                0   2.6  97.4\n",
              "21938           34             11.0                0   1.9  98.1\n",
              "21944           35              7.0                0   1.5  98.5\n",
              "21951           36              4.0                0   1.3  98.7"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-659d8a23-093a-4d2a-90e9-680b35000aad\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>end_of_over</th>\n",
              "      <th>runs_after_over</th>\n",
              "      <th>wickets_in_over</th>\n",
              "      <th>lose</th>\n",
              "      <th>win</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>21600</th>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>20.8</td>\n",
              "      <td>79.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21608</th>\n",
              "      <td>2</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0</td>\n",
              "      <td>14.5</td>\n",
              "      <td>85.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21614</th>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>28.5</td>\n",
              "      <td>71.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21621</th>\n",
              "      <td>4</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>57.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21627</th>\n",
              "      <td>5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>61.9</td>\n",
              "      <td>38.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21633</th>\n",
              "      <td>6</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>45.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21639</th>\n",
              "      <td>7</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>51.1</td>\n",
              "      <td>48.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21645</th>\n",
              "      <td>8</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>47.9</td>\n",
              "      <td>52.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21651</th>\n",
              "      <td>9</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0</td>\n",
              "      <td>35.8</td>\n",
              "      <td>64.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21658</th>\n",
              "      <td>10</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0</td>\n",
              "      <td>31.6</td>\n",
              "      <td>68.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21665</th>\n",
              "      <td>11</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0</td>\n",
              "      <td>27.7</td>\n",
              "      <td>72.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21671</th>\n",
              "      <td>12</td>\n",
              "      <td>15.0</td>\n",
              "      <td>0</td>\n",
              "      <td>19.3</td>\n",
              "      <td>80.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21677</th>\n",
              "      <td>13</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>15.7</td>\n",
              "      <td>84.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21683</th>\n",
              "      <td>14</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>14.1</td>\n",
              "      <td>85.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21689</th>\n",
              "      <td>15</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>11.3</td>\n",
              "      <td>88.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21695</th>\n",
              "      <td>16</td>\n",
              "      <td>11.0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.3</td>\n",
              "      <td>91.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21701</th>\n",
              "      <td>17</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0</td>\n",
              "      <td>6.8</td>\n",
              "      <td>93.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21708</th>\n",
              "      <td>18</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>94.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21843</th>\n",
              "      <td>19</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>95.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21851</th>\n",
              "      <td>20</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.4</td>\n",
              "      <td>96.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21857</th>\n",
              "      <td>21</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>7.6</td>\n",
              "      <td>92.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21864</th>\n",
              "      <td>22</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1</td>\n",
              "      <td>13.6</td>\n",
              "      <td>86.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21870</th>\n",
              "      <td>23</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>25.3</td>\n",
              "      <td>74.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21876</th>\n",
              "      <td>24</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0</td>\n",
              "      <td>20.4</td>\n",
              "      <td>79.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21882</th>\n",
              "      <td>25</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>17.9</td>\n",
              "      <td>82.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21888</th>\n",
              "      <td>26</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>16.1</td>\n",
              "      <td>83.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21894</th>\n",
              "      <td>27</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.5</td>\n",
              "      <td>89.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21901</th>\n",
              "      <td>28</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.8</td>\n",
              "      <td>91.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21908</th>\n",
              "      <td>29</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.4</td>\n",
              "      <td>92.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21914</th>\n",
              "      <td>30</td>\n",
              "      <td>15.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.8</td>\n",
              "      <td>95.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21920</th>\n",
              "      <td>31</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.8</td>\n",
              "      <td>96.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21926</th>\n",
              "      <td>32</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.3</td>\n",
              "      <td>96.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21932</th>\n",
              "      <td>33</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.6</td>\n",
              "      <td>97.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21938</th>\n",
              "      <td>34</td>\n",
              "      <td>11.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>98.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21944</th>\n",
              "      <td>35</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.5</td>\n",
              "      <td>98.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21951</th>\n",
              "      <td>36</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.3</td>\n",
              "      <td>98.7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-659d8a23-093a-4d2a-90e9-680b35000aad')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-659d8a23-093a-4d2a-90e9-680b35000aad button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-659d8a23-093a-4d2a-90e9-680b35000aad');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=(18,8))\n",
        "plt.plot(temp_df['end_of_over'],temp_df['wickets_in_over'],color='yellow',linewidth=3)\n",
        "plt.plot(temp_df['end_of_over'],temp_df['win'],color='#00a65a',linewidth=4)\n",
        "plt.plot(temp_df['end_of_over'],temp_df['lose'],color='red',linewidth=4)\n",
        "plt.bar(temp_df['end_of_over'],temp_df['runs_after_over'])\n",
        "plt.title('Target-' + str(target))"
      ],
      "metadata": {
        "id": "SqB3eGk9rBka",
        "outputId": "b397d76f-90ba-408b-8637-c836b7840591",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Target-137.0')"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "teams"
      ],
      "metadata": {
        "id": "vqT-xW6xs11f",
        "outputId": "e3ebcbac-0bb4-4e34-acfd-a29ea8afddb9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Sunrisers Hyderabad',\n",
              " 'Mumbai Indians',\n",
              " 'Royal Challengers Bangalore',\n",
              " 'Kolkata Knight Riders',\n",
              " 'Kings XI Punjab',\n",
              " 'Chennai Super Kings',\n",
              " 'Rajasthan Royals',\n",
              " 'Delhi Capitals']"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "22#for predicting scores by given input\n",
        "batting_team = input(print('Enter the name of team who is batting : '))\n",
        "bowling_team = input(print('Enter the name of bowling team : '))\n",
        "host_city = input(print('Select host city : '))\n",
        "target = int(input(print('Enter the target to be chased : ')))\n",
        "score= int(input(print('Enter the current score : ')))\n",
        "balls = float(input(print('Enter number of balls played : ')))\n",
        "wickets = int(input(print('Enter fall of wickets : ')))\n",
        "runs_left = target - score\n",
        "balls_left = 120 - balls\n",
        "wickets = 10 - wickets\n",
        "crr = score*6/(balls)\n",
        "rrr = (runs_left*6)/balls_left\n",
        "input_df = pd.DataFrame({'batting_team':[batting_team],'bowling_team':[bowling_team],'city':[host_city],'runs_left':[runs_left],'balls_left':[balls_left],'wickets':[wickets],'total_runs_x':[target],'crr':[crr],'rrr':[rrr]})\n",
        "result = pipe.predict_proba(input_df)\n",
        "loss = result[0][0]\n",
        "win = result[0][1]\n"
      ],
      "metadata": {
        "id": "iGB9PSZOri5V",
        "outputId": "45f312fe-058d-4dfe-b5e6-cf4dc4b9e6b6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter the name of team who is batting : \n",
            "NoneRoyal Challengers Bangalore\n",
            "Enter the name of bowling team : \n",
            "NoneChennai Super Kings\n",
            "Select host city : \n",
            "NoneChennai\n",
            "Enter the target to be chased : \n",
            "None225\n",
            "Enter the current score : \n",
            "None190\n",
            "Enter number of balls played : \n",
            "None96\n",
            "Enter fall of wickets : \n",
            "None3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "win_batting = win*100\n",
        "win_bowling = 100-win_batting\n",
        "lose_batting = win_bowling\n",
        "lose_bowling = win_batting\n",
        "print(\"batting team \"+batting_team+ str(round(win*100)) + '%')\n",
        "print(\"bowling_team \"+bowling_team + str(round(loss*100)) +'%')"
      ],
      "metadata": {
        "id": "R2qxxMHwwB_c",
        "outputId": "228690b7-4bea-445a-e781-21cbef856393",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "batting team Royal Challengers Bangalore28%\n",
            "bowling_team Chennai Super Kings72%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = ['Batting team', 'Bowling team']\n",
        "y = [win_batting, win_bowling]\n",
        "y1 = [lose_batting, lose_bowling]\n",
        "plt.bar(x, y,  color='g')\n",
        "plt.bar(x, y1,bottom =y, color = 'r')\n",
        "plt.legend(['Win', 'Lose'])\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "FBTZt9KY8epH",
        "outputId": "07e1b133-ff88-441b-a044-5d1812b276ea",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAigAAAGdCAYAAAA44ojeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAo70lEQVR4nO3de1zUdaL/8fcgyJ1BUQfcUChJyTUVNUN8eGUXuy2mW3mypDLtsau26qobp9RsLcu8pZWW66qVVts5x25n19ZIzFUkxEs3ozJKXAH1KIxQIMj390f5/TWKGjY4H/T1fDzm8Wg+38t8pvoOL77zncFhWZYlAAAAg/j5egIAAACnIlAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGMff1xM4H3V1dTpw4IDCw8PlcDh8PR0AAPATWJalY8eOqW3btvLzO/s5kiYZKAcOHFBsbKyvpwEAAM5DUVGRLrvssrOu0yQDJTw8XNL3TzAiIsLHswEAAD+F2+1WbGys/XP8bJpkoJx8WyciIoJAAQCgifkpl2dwkSwAADAOgQIAAIxDoAAAAOM0yWtQAABoTCdOnFBNTY2vp9HkNGvWTP7+/l75ChACBQCAH6moqND+/ftlWZavp9IkhYSEKCYmRs2bN/9Z+yFQAAD4wYkTJ7R//36FhISodevWfBloA1iWpePHj+vQoUMqLCxUQkLCOb+M7WwIFAAAflBTUyPLstS6dWsFBwf7ejpNTnBwsAICAvTNN9/o+PHjCgoKOu99cZEsAACn4MzJ+fs5Z0089uOVvQAAAHgRgQIAAIzT4GtQ3n//fT355JPKz89XcXGx1q1bp6FDh9rLLcvSzJkztXz5cpWVlSklJUVLly5VQkKCvc6RI0c0YcIEvfXWW/Lz89Pw4cP11FNPKSwszCtPCgAAb3LMurBv+VgzG/cTRNnZ2Ro4cKCOHj2qyMjIRn2s89XgMyiVlZXq2rWrnnnmmXqXz507V4sXL9ayZcuUm5ur0NBQpaWlqaqqyl5n5MiR+uSTT7Rhwwa9/fbbev/99zV27NjzfxYAAFyili1bpvDwcNXW1tpjFRUVCggI0IABAzzWzc7OlsPhUExMjIqLi+V0Oi/wbH+6Bp9Bue6663TdddfVu8yyLC1atEgPPfSQ0tPTJUkvvPCCXC6XXn/9dY0YMUJ79uzR+vXrlZeXp549e0qSlixZouuvv17z5s1T27Ztf8bTAQDg0jJw4EBVVFRo+/btuvbaayVJmzdvVnR0tHJzc1VVVWV/mmbjxo1q166dOnbs6Msp/yRevQalsLBQJSUlSk1NtcecTqd69+6tnJwcSVJOTo4iIyPtOJGk1NRU+fn5KTc3t979VldXy+12e9wAAIDUsWNHxcTEKDs72x7Lzs5Wenq64uPjtW3bNo/xgQMH2mdSysrKJEmrVq1SZGSk3nnnHSUmJiosLExDhgxRcXHxBX42/59XvwelpKREkuRyuTzGXS6XvaykpERt2rTxnIS/v1q2bGmvc6o5c+Zo1qxZ3pzq2fHxMuDMLpZv1+Q4R33at5eWLZMqK307j+3bG7T6wKuv1sY33tADP5wg2Pj225o2apROXHWVNq5ZowFhYfquqkq527bpnoEDpYKC7zfcuVMKD5cKC/VtZaXmzZihFzMz5efnpzsee0xTpkzRmjVrvP3sfpIm8SmezMxMlZeX27eioiJfTwkAAGMM7NlTW3bvVm1trY5VVmpnQYH6JyWpX/fuys7PlyTlfPSRqo8f18AfvYPxYzW1tVqWmameV12lpE6dNH78eGVlZV3Ip+HBq4ESHR0tSSotLfUYLy0ttZdFR0fr4MGDHstra2t15MgRe51TBQYGKiIiwuMGAAC+N6BHD1V+953yPv1Um3ft0pXt2ql1ixbqn5Sk3E8+UVV1tbLz83X5L36hdmf4WRsSFKQrLrvMvh8TE3Paz+sLyauBEh8fr+joaI/icrvdys3NVXJysiQpOTlZZWVlyv+h6CTpvffeU11dnXr37u3N6QAAcEnoEBury9q00cb8fG3cvl39k5IkSW1bt1asy6WtH36ojfn5GnSGsyeSFODvedWHw+Hw6R9MbPA1KBUVFfryyy/t+4WFhdq1a5datmypdu3aaeLEiZo9e7YSEhIUHx+v6dOnq23btvZ3pSQmJmrIkCEaM2aMli1bppqaGo0fP14jRozgEzwAAJyngT17Kjs/X0fdbk298057vF/37vrH1q364JNP9Lvhw304w4ZpcKBs375dAwcOtO9PnjxZkpSRkaFVq1Zp2rRpqqys1NixY1VWVqa+fftq/fr1Hn8waM2aNRo/frwGDx5sf1Hb4sWLvfB0AAC4NA3s0UPj5s5VTW2tfQZFkvonJWn8k0/qeE3NGa8/MVGDA2XAgAFnPeXjcDj0yCOP6JFHHjnjOi1bttTatWsb+tAAAPiEdUOer6dwTgN79tR31dXqFBcnV1SUPd4/KUnHKivVsX17xbRq5cMZNozD8uUbTOfJ7XbL6XSqvLy8cS6Y5eOHwJk1vZeM+nGcox5V7durcNkyxbdqpaBzr35xO8+zLVVVVSosLFR8fLzHuydSw35+N4mPGQMAgEsLgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwToO/6h4AgEtOr14X9vHyGvbV+nc9/LDKKir0+rx5jTShC48zKAAAwDgECgAAF7FN+fm6JiNDgX36KGbIED2wZIlqa2vt5f+VlaUuI0YouG9fRaWmKvX3v1fld9/Zy//yl78oMTFRQUFB6tSpk5599tkLMm/e4gEA4CL174MHdf3Eibrrxhv1wqxZ+uzrrzXm0UcVFBioh8eOVfHhw/qPBx/U3Pvv180DBujYt99q886dOvl3hNesWaMZM2bo6aefVvfu3bVz506NGTNGoaGhysjIaNS5EygAAFyknv2v/1Ksy6Wnp02Tw+FQp7g4HTh0SH96+mnNuPdeFR8+rNoTJzRs4EC1j4mRJHXp0MHefubMmZo/f76GDRsmSYqPj9enn36q5557jkABAADnZ09hoZK7dJHD4bDHUrp2VcW332r/wYPqmpCgwb16qct//IfSrr1Wv+7dW78dPFgtIiJUWVmpvXv3avTo0RozZoy9fW1trZxOZ6PPnUABAOAS1axZM2145hlt/fBD/XPbNi3529/04NKlyl25UiGxsZKk5cuXq3fv3qdt19i4SBYAgItUYny8cj76yL6mRJK27N6t8NBQXdamjSTJ4XAopWtXzbrvPu186SU1DwjQuuxsuVwutW3bVl999ZU6dOjgcYuPj2/0uXMGBQCAi0B5RYV2FRR4jI29+WYtevllTXjySY2/9VYVfPONZj7/vCbffrv8/PyU+/HHysrL069791abli2V+/HHOnT0qBLj4iRJs2bN0v333y+n06khQ4aourpa27dv19GjRzV58uRGfT4ECgAAF4Hs/Hx1v+MOj7HR6en6+6JFmrp4sbrefrtaRkRo9G9+o4fuuUeSFBEaqvd37NCil1+Wu7JS7aOjNX/iRF2XkiJJuvfeexUSEqInn3xSU6dOVWhoqLp06aKJEyc2+vNxWD8+79NEuN1uOZ1OlZeXKyIiwvsP8KOLiQCcoum9ZNSP4xz1qGrfXoXLlim+VSsF+Xoyvtaz53ltVlVVpcLCQsXHxysoyPPfYkN+fnMNCgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwDoECAMBJliVZli6Sz6r5hLc+HEygAADwg2bHjkm1tTru64k0Yd9++60kKSAg4Gfthy9qAwDgB/5lZQrZvl2HfvUrBQQFXdq/xVdVNWh1y7L07bff6uDBg4qMjPzZf6+HQAEA4AcOy1LM0qUq7NBB37RqdWl/oV9h4XltFhkZqejo6J/98AQKAAA/0vzQISXcc4+OR0dLF+Cv9hrrs88avElAQIDX/tIxgQIAwCn8amsVtH+/r6fhW0G+/bL/S/rtNQAAYCYCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxvF6oJw4cULTp09XfHy8goODdcUVV+jPf/6zLMuy17EsSzNmzFBMTIyCg4OVmpqqL774wttTAQAATZTXA+WJJ57Q0qVL9fTTT2vPnj164oknNHfuXC1ZssReZ+7cuVq8eLGWLVum3NxchYaGKi0tTVVVVd6eDgAAaIIc1o9PbXjBjTfeKJfLpRUrVthjw4cPV3BwsF566SVZlqW2bdvqj3/8o6ZMmSJJKi8vl8vl0qpVqzRixIhzPobb7ZbT6VR5ebkiIiK8Of3vORze3ydwsfDuS4bvcJwDZ9cIx3pDfn57/QxKnz59lJWVpc8//1yStHv3bv3rX//SddddJ0kqLCxUSUmJUlNT7W2cTqd69+6tnJwcb08HAAA0Qf7e3uEDDzwgt9utTp06qVmzZjpx4oQeffRRjRw5UpJUUlIiSXK5XB7buVwue9mpqqurVV1dbd93u93enjYAADCI18+g/O1vf9OaNWu0du1a7dixQ6tXr9a8efO0evXq897nnDlz5HQ67VtsbKwXZwwAAEzj9UCZOnWqHnjgAY0YMUJdunTRnXfeqUmTJmnOnDmSpOjoaElSaWmpx3alpaX2slNlZmaqvLzcvhUVFXl72gAAwCBeD5Rvv/1Wfn6eu23WrJnq6uokSfHx8YqOjlZWVpa93O12Kzc3V8nJyfXuMzAwUBERER43AABw8fL6NSg33XSTHn30UbVr106dO3fWzp07tWDBAt1zzz2SJIfDoYkTJ2r27NlKSEhQfHy8pk+frrZt22ro0KHeng4AAGiCvB4oS5Ys0fTp0/X73/9eBw8eVNu2bXXfffdpxowZ9jrTpk1TZWWlxo4dq7KyMvXt21fr169XUFCQt6cDAACaIK9/D8qFwPegAD7U9F4y6sdxDpzdxfY9KAAAAD8XgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwDoECAACMQ6AAAADjECgAAMA4BAoAADAOgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwjr+vJwAAvuB42NczAMxm+fjxOYMCAACMQ6AAAADjECgAAMA4BAoAADAOgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwDoECAACMQ6AAAADjECgAAMA4BAoAADAOgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwDoECAACMQ6AAAADjECgAAMA4BAoAADAOgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwDoECAACMQ6AAAADjNEqg/Pvf/9Ydd9yhqKgoBQcHq0uXLtq+fbu93LIszZgxQzExMQoODlZqaqq++OKLxpgKAABogrweKEePHlVKSooCAgL0j3/8Q59++qnmz5+vFi1a2OvMnTtXixcv1rJly5Sbm6vQ0FClpaWpqqrK29MBAABNkL+3d/jEE08oNjZWK1eutMfi4+Ptf7YsS4sWLdJDDz2k9PR0SdILL7wgl8ul119/XSNGjPD2lAAAQBPj9TMob775pnr27KlbbrlFbdq0Uffu3bV8+XJ7eWFhoUpKSpSammqPOZ1O9e7dWzk5OfXus7q6Wm632+MGAAAuXl4PlK+++kpLly5VQkKC3nnnHf3ud7/T/fffr9WrV0uSSkpKJEkul8tjO5fLZS871Zw5c+R0Ou1bbGyst6cNAAAM4vVAqaurU1JSkh577DF1795dY8eO1ZgxY7Rs2bLz3mdmZqbKy8vtW1FRkRdnDAAATOP1QImJidFVV13lMZaYmKh9+/ZJkqKjoyVJpaWlHuuUlpbay04VGBioiIgIjxsAALh4eT1QUlJSVFBQ4DH2+eefq3379pK+v2A2OjpaWVlZ9nK3263c3FwlJyd7ezoAAKAJ8vqneCZNmqQ+ffroscce06233qoPPvhAzz//vJ5//nlJksPh0MSJEzV79mwlJCQoPj5e06dPV9u2bTV06FBvTwcAADRBXg+UXr16ad26dcrMzNQjjzyi+Ph4LVq0SCNHjrTXmTZtmiorKzV27FiVlZWpb9++Wr9+vYKCgrw9HQAA0AQ5LMuyfD2JhnK73XI6nSovL2+c61EcDu/vE7hYNL2XjHo5ZnGcA2djzfT+sd6Qn9/8LR4AAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGafRAefzxx+VwODRx4kR7rKqqSuPGjVNUVJTCwsI0fPhwlZaWNvZUAABAE9GogZKXl6fnnntOV199tcf4pEmT9NZbb+m1117Tpk2bdODAAQ0bNqwxpwIAAJqQRguUiooKjRw5UsuXL1eLFi3s8fLycq1YsUILFizQoEGD1KNHD61cuVJbt27Vtm3bGms6AACgCWm0QBk3bpxuuOEGpaameozn5+erpqbGY7xTp05q166dcnJy6t1XdXW13G63xw0AAFy8/Btjp6+88op27NihvLy805aVlJSoefPmioyM9Bh3uVwqKSmpd39z5szRrFmzGmOqAADAQF4/g1JUVKQ//OEPWrNmjYKCgryyz8zMTJWXl9u3oqIir+wXAACYyeuBkp+fr4MHDyopKUn+/v7y9/fXpk2btHjxYvn7+8vlcun48eMqKyvz2K60tFTR0dH17jMwMFAREREeNwAAcPHy+ls8gwcP1kcffeQxdvfdd6tTp07605/+pNjYWAUEBCgrK0vDhw+XJBUUFGjfvn1KTk729nQAAEAT5PVACQ8P1y9/+UuPsdDQUEVFRdnjo0eP1uTJk9WyZUtFRERowoQJSk5O1rXXXuvt6QAAgCaoUS6SPZeFCxfKz89Pw4cPV3V1tdLS0vTss8/6YioAAMBADsuyLF9PoqHcbrecTqfKy8sb53oUh8P7+wQuFk3vJaNejlkc58DZWDO9f6w35Oc3f4sHAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHH9fT8BEjod9PQPAXJavJwDgksAZFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMYhUAAAgHEIFAAAYBwCBQAAGIdAAQAAxiFQAACAcQgUAABgHAIFAAAYh0ABAADGIVAAAIBxCBQAAGAcAgUAABiHQAEAAMbxeqDMmTNHvXr1Unh4uNq0aaOhQ4eqoKDAY52qqiqNGzdOUVFRCgsL0/Dhw1VaWurtqQAAgCbK64GyadMmjRs3Ttu2bdOGDRtUU1OjX//616qsrLTXmTRpkt566y299tpr2rRpkw4cOKBhw4Z5eyoAAKCJ8vf2DtevX+9xf9WqVWrTpo3y8/PVr18/lZeXa8WKFVq7dq0GDRokSVq5cqUSExO1bds2XXvttd6eEgAAaGIa/RqU8vJySVLLli0lSfn5+aqpqVFqaqq9TqdOndSuXTvl5OTUu4/q6mq53W6PGwAAuHg1aqDU1dVp4sSJSklJ0S9/+UtJUklJiZo3b67IyEiPdV0ul0pKSurdz5w5c+R0Ou1bbGxsY04bAAD4WKMGyrhx4/Txxx/rlVde+Vn7yczMVHl5uX0rKiry0gwBAICJvH4Nyknjx4/X22+/rffff1+XXXaZPR4dHa3jx4+rrKzM4yxKaWmpoqOj691XYGCgAgMDG2uqAADAMF4/g2JZlsaPH69169bpvffeU3x8vMfyHj16KCAgQFlZWfZYQUGB9u3bp+TkZG9PBwAANEFeP4Mybtw4rV27Vm+88YbCw8Pt60qcTqeCg4PldDo1evRoTZ48WS1btlRERIQmTJig5ORkPsEDAAAkNUKgLF26VJI0YMAAj/GVK1fqrrvukiQtXLhQfn5+Gj58uKqrq5WWlqZnn33W21MBAABNlNcDxbKsc64TFBSkZ555Rs8884y3Hx4AAFwE+Fs8AADAOAQKAAAwDoECAACMQ6AAAADjECgAAMA4BAoAADAOgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwDoECAACMQ6AAAADjECgAAMA4BAoAADAOgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwDoECAACMQ6AAAADjECgAAMA4BAoAADAOgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwDoECAACMQ6AAAADjECgAAMA4BAoAADAOgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjEOgAAAA4xAoAADAOAQKAAAwDoECAACMQ6AAAADjECgAAMA4BAoAADAOgQIAAIxDoAAAAOMQKAAAwDgECgAAMA6BAgAAjOPTQHnmmWcUFxenoKAg9e7dWx988IEvpwMAAAzhs0B59dVXNXnyZM2cOVM7duxQ165dlZaWpoMHD/pqSgAAwBA+C5QFCxZozJgxuvvuu3XVVVdp2bJlCgkJ0V//+ldfTQkAABjC3xcPevz4ceXn5yszM9Me8/PzU2pqqnJyck5bv7q6WtXV1fb98vJySZLb7W6cCVY1zm6Bi0GjHXcXGsc5cFaNcayf3KdlWedc1yeBcvjwYZ04cUIul8tj3OVy6bPPPjtt/Tlz5mjWrFmnjcfGxjbaHAHUz/m409dTAHABNOaxfuzYMTmdZ9+/TwKloTIzMzV58mT7fl1dnY4cOaKoqCg5HA4fzgyNze12KzY2VkVFRYqIiPD1dAA0Ao7zS4dlWTp27Jjatm17znV9EiitWrVSs2bNVFpa6jFeWlqq6Ojo09YPDAxUYGCgx1hkZGRjThGGiYiI4IULuMhxnF8aznXm5CSfXCTbvHlz9ejRQ1lZWfZYXV2dsrKylJyc7IspAQAAg/jsLZ7JkycrIyNDPXv21DXXXKNFixapsrJSd999t6+mBAAADOGzQLntttt06NAhzZgxQyUlJerWrZvWr19/2oWzuLQFBgZq5syZp73FB+DiwXGO+jisn/JZHwAAgAuIv8UDAACMQ6AAAADjECgAAMA4BAoa3cMPP6xu3br5ehoAGkl2drYcDofKysokSatWreK7qvCzESiXmLvuuksOh8O+RUVFaciQIfrwww8btJ8zRYfD4dDrr7/uMTZlyhSP77xpLHfddZeGDh3a6I8DmMxbx/jPcdttt+nzzz9v9Mfhl5+LG4FyCRoyZIiKi4tVXFysrKws+fv768Ybb2y0xwsLC1NUVFSj7R+Apwt9jJ8qODhYbdq0uWCPh4sTgXIJCgwMVHR0tKKjo9WtWzc98MADKioq0qFDh+x1/vSnP+nKK69USEiILr/8ck2fPl01NTWSvj99O2vWLO3evdv+LW3VqlWKi4uTJN18881yOBz2/VN/yzl5pmPevHmKiYlRVFSUxo0bZ+9fkoqLi3XDDTcoODhY8fHxWrt2reLi4rRo0aJ6n9PDDz+s1atX64033rDnlJ2dLUkqKirSrbfeqsjISLVs2VLp6en6+uuv7W3z8vL0q1/9Sq1atZLT6VT//v21Y8cOj/07HA4999xzuvHGGxUSEqLExETl5OToyy+/1IABAxQaGqo+ffpo79695/cfBfCin3KMf/TRRxo0aJCCg4MVFRWlsWPHqqKiQpL08ccfy8/Pz17/yJEj8vPz04gRI+ztZ8+erb59+9b7+Ke+xXPyNeDFF19UXFycnE6nRowYoWPHjtnrHDt2TCNHjlRoaKhiYmK0cOFCDRgwQBMnTjzjY9T3OiRJZWVluvfee9W6dWtFRERo0KBB2r17t73t3r17lZ6eLpfLpbCwMPXq1Uvvvvuux/7j4uI0e/ZsjRo1SmFhYWrfvr3efPNNHTp0SOnp6QoLC9PVV1+t7du3n/s/CM4LgXKJq6io0EsvvaQOHTp4nOUIDw/XqlWr9Omnn+qpp57S8uXLtXDhQknfn7794x//qM6dO9u/pd12223Ky8uTJK1cuVLFxcX2/fps3LhRe/fu1caNG7V69WqtWrXKfnGRpFGjRunAgQPKzs7Wf//3f+v555/XwYMHz7i/KVOm6NZbb/X4zbFPnz6qqalRWlqawsPDtXnzZm3ZskVhYWEaMmSIjh8/Lun7F8aMjAz961//0rZt25SQkKDrr7/e48VTkv785z9r1KhR2rVrlzp16qTbb79d9913nzIzM7V9+3ZZlqXx48c3+L8B0JjqO8YrKyuVlpamFi1aKC8vT6+99preffdd+//fzp07KyoqSps2bZIkbd682eO+JG3atEkDBgz4yfPYu3evXn/9db399tt6++23tWnTJj3++OP28smTJ2vLli168803tWHDBm3evPm0XxR+7EyvQ5J0yy236ODBg/rHP/6h/Px8JSUlafDgwTpy5Ij97+T6669XVlaWdu7cqSFDhuimm27Svn37PB5j4cKFSklJ0c6dO3XDDTfozjvv1KhRo3THHXdox44duuKKKzRq1CjxdWKNxMIlJSMjw2rWrJkVGhpqhYaGWpKsmJgYKz8//6zbPfnkk1aPHj3s+zNnzrS6du162nqSrHXr1nmMnbpuRkaG1b59e6u2ttYeu+WWW6zbbrvNsizL2rNnjyXJysvLs5d/8cUXliRr4cKFZ31u6enpHmMvvvii1bFjR6uurs4eq66utoKDg6133nmn3v2cOHHCCg8Pt9566y2P5/XQQw/Z93NycixJ1ooVK+yxl19+2QoKCjrj/IAL4acc488//7zVokULq6Kiwh773//9X8vPz88qKSmxLMuyhg0bZo0bN86yLMuaOHGiNXXqVKtFixbWnj17rOPHj1shISHWP//5T8uyLGvjxo2WJOvo0aOWZVnWypUrLafTae975syZVkhIiOV2u+2xqVOnWr1797Ysy7LcbrcVEBBgvfbaa/bysrIyKyQkxPrDH/5wxuda3+vQ5s2brYiICKuqqspj/IorrrCee+65M+6rc+fO1pIlS+z77du3t+644w77fnFxsSXJmj59uj128nWguLj4jPvF+eMMyiVo4MCB2rVrl3bt2qUPPvhAaWlpuu666/TNN9/Y67z66qtKSUlRdHS0wsLC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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}